export default {
  message: {
    common: {
      save: 'Save',
      cancel: 'Cancel',
      delete: 'Delete',
      edit: 'Edit',
      add: 'Add',
      remove: 'Remove',
      close: 'Close',
      confirm: 'Confirm',
      success: 'Success',
      error: 'Error',
      warning: 'Warning',
      info: 'Info',
      loading: 'Loading...',
      noData: 'No data available',
      total: 'Total',
      copy: 'Copy',
      copiedToClipboard: 'Copied to clipboard',
      actions: 'Actions',
      back: 'Back'
    },
    auth: {
      login: 'Login',
      logout: 'Logout',
      authenticating: 'Authenticating...',
      authenticationSuccess: 'Authentication successful',
      authenticationFailed: 'Authentication failed',
      welcome: 'Welcome to Remote Network',
      selectPrivateKey: 'Select your Ed25519 private key file to authenticate',
      chooseKeyFile: 'Choose Key File',
      noFileSelected: 'No file selected',
      authMethod: 'Node Endpoint',
      ed25519Auth: 'Ed25519 Key Authentication'
    },
    dashboard: {
      title: 'Dashboard',
      nodeStatus: 'Node Status',
      peerId: 'Peer ID',
      dhtNodeId: 'DHT Node ID',
      nodeType: 'Node Type',
      publicEndpoint: 'Public Endpoint',
      privateEndpoint: 'Private Endpoint',
      isRelay: 'Is Relay',
      isStore: 'Is Store',
      wallet: 'Wallet',
      provider: 'Provider',
      uptime: 'Uptime',
      knownPeers: 'Known Peers',
      activeServices: 'Active Services',
      purchasedServices: 'Purchased Services',
      soldServices: 'Sold Services',
      runningWorkflows: 'Running Workflows',
      workflowsInDesign: 'Workflows in Design',
      quickLinks: 'Quick Links',
      recentWorkflows: 'Recent Workflows',
      addLocalService: 'Add Local Service',
      searchRemoteService: 'Search Remote Service',
      // Relay section
      relayInfo: 'Relay Information',
      relayMode: 'Relay Mode',
      natMode: 'NAT Mode',
      activeSessions: 'Active Sessions',
      maxConnections: 'Max Connections',
      pricingPerGb: 'Pricing per GB',
      totalTraffic: 'Total Traffic',
      totalEarnings: 'Total Earnings',
      connectedClients: 'Connected Clients',
      sessionDuration: 'Session Duration',
      trafficIngress: 'Ingress',
      trafficEgress: 'Egress',
      trafficTotal: 'Total',
      earnings: 'Earnings',
      currentCost: 'Current Cost',
      disconnect: 'Disconnect',
      blacklist: 'Blacklist',
      disconnectConfirm: 'Are you sure you want to disconnect this session?',
      blacklistConfirm: 'Are you sure you want to blacklist this peer? They will be disconnected immediately.',
      sessionDisconnected: 'Session disconnected successfully',
      peerBlacklisted: 'Peer blacklisted successfully',
      // NAT mode relay section
      currentRelay: 'Current Relay',
      connectedRelay: 'Connected Relay',
      relayLatency: 'Latency',
      relayPricing: 'Pricing',
      trafficConsumed: 'Traffic Consumed',
      availableRelays: 'Available Relays',
      relayEndpoint: 'Endpoint',
      reputationScore: 'Reputation',
      capacity: 'Capacity',
      status: 'Status',
      connected: 'Connected',
      preferred: 'Preferred',
      available: 'Available',
      connect: 'Connect',
      setPreferred: 'Set as Preferred',
      removePreferred: 'Remove Preferred',
      connectToRelay: 'Connect to Relay',
      disconnectFromRelay: 'Disconnect from Relay',
      connectConfirm: 'Connect to this relay?',
      disconnectRelayConfirm: 'Disconnect from current relay?',
      connectingToRelay: 'Connecting to relay...',
      disconnectingRelay: 'Disconnecting from relay...',
      relayConnected: 'Connected to relay successfully',
      relayDisconnected: 'Disconnected from relay successfully',
      preferredSet: 'Preferred relay set successfully',
      noRelay: 'Not connected to relay',
      noRelayCandidates: 'No relay candidates available',
      noActiveSessions: 'No active sessions'
    },
    workflows: {
      title: 'Workflows',
      list: 'Workflow List',
      create: 'Create Workflow',
      edit: 'Edit Workflow',
      delete: 'Delete Workflow',
      execute: 'Execute Workflow',
      name: 'Workflow Name',
      description: 'Description',
      deleteConfirm: 'Are you sure you want to delete this workflow?',
      deleteSuccess: 'Workflow deleted successfully',
      deleteError: 'Failed to delete workflow',
      createSuccess: 'Workflow created successfully',
      createError: 'Failed to create workflow',
      updateSuccess: 'Workflow updated successfully',
      updateError: 'Failed to update workflow',
      editor: {
        title: 'Workflow Editor',
        snapToGrid: 'Snap to Grid',
        searchServices: 'Search Services',
        dragServiceHere: 'Drag services here to build your workflow',
        noServiceSelected: 'No service selected',
        addService: 'Add Service',
        removeService: 'Remove Service'
      }
    },
    services: {
      title: 'Services',
      list: 'Service List',
      add: 'Add Service',
      addDataService: 'Add Data Service',
      addLocalService: 'Add Local Service',
      searchRemoteService: 'Search Remote Service',
      edit: 'Edit Service',
      delete: 'Delete Service',
      type: 'Service Type',
      endpoint: 'Endpoint',
      status: 'Status',
      pricing: 'Pricing',
      capabilities: 'Capabilities',
      peerServicesTitle: 'Peer Services',
      peerServicesPlaceholder: 'Service discovery for peers is coming soon. This section will display all services hosted by this peer.',

      // Data Service Dialog
      serviceName: 'Service Name',
      serviceDescription: 'Service Description',
      selectFile: 'Select File',
      chooseFile: 'Choose File',
      amount: 'Amount',
      oneTime: 'One-Time',
      recurring: 'Recurring',
      seconds: 'Second(s)',
      minutes: 'Minute(s)',
      hours: 'Hour(s)',
      days: 'Day(s)',
      weeks: 'Week(s)',
      months: 'Month(s)',
      years: 'Year(s)',
      nameRequired: 'Service name is required',
      fileRequired: 'Please select a file',
      serviceCreated: 'Service created successfully',
      createFailed: 'Failed to create service',

      // Upload Progress
      uploadProgress: 'Upload Progress',
      uploadComplete: 'Upload Complete',
      uploadCompleteMessage: 'File uploaded and processed successfully',
      uploadFailed: 'Upload failed',
      uploadCancelled: 'Upload cancelled',
      pause: 'Pause',
      resume: 'Resume',
      startUpload: 'Start Upload',

      // Service Types
      types: {
        storage: 'File Storage',
        docker: 'Docker Container',
        standalone: 'Standalone App',
        relay: 'Relay Service',
        data: 'Data / Files'
      },

      // Service Statuses
      statuses: {
        available: 'Available',
        busy: 'Busy',
        offline: 'Offline',
        active: 'Active',
        inactive: 'Inactive'
      },

      // Actions
      changeStatus: 'Change Status',
      viewPassphrase: 'View Passphrase',
      addToWorkflow: 'Add to Workflow',

      // Messages
      deleteConfirm: 'Are you sure you want to delete this service?',
      deleteSuccess: 'Service deleted successfully',
      deleteError: 'Failed to delete service',
      addSuccess: 'Service added successfully',
      addError: 'Failed to add service',
      updateSuccess: 'Service updated successfully',
      updateError: 'Failed to update service',
      statusUpdateSuccess: 'Service status updated successfully',
      statusUpdateError: 'Failed to update service status',

      // Sections
      localServices: 'Local Services',
      remoteServices: 'Remote Services',
      noLocalServices: 'No local services yet. Click "Add Local Service" to get started.',
      noRemoteServices: 'No remote services found. Use the search to discover services from other peers.',

      // Search and Filter
      searchPlaceholder: 'Search by service name or description...',
      filterByPeers: 'Filter by Peers',
      selectPeers: 'Select peers to search...',

      // Wizard
      wizard: {
        basicInfo: 'Basic Information',
        pricing: 'Pricing',
        serviceType: 'Service Type',
        configuration: 'Configuration',
        next: 'Next',
        previous: 'Previous',
        finish: 'Finish',
        selectType: 'Select Service Type',
        typeRequired: 'Please select a service type',

        // Service type descriptions
        dataDescription: 'Share files and folders with other peers',
        dockerDescription: 'Run containerized applications',
        standaloneDescription: 'Run standalone executables',

        // DATA service
        dataConfig: 'Data Service Configuration',
        selectFiles: 'Select Files or Folder',
        chooseFiles: 'Choose Files',
        chooseFolder: 'Choose Folder',
        filesSelected: 'file(s) selected',
        andMore: 'and {count} more...',

        // DOCKER service
        dockerConfig: 'Docker Configuration',
        dockerImage: 'Docker Image',
        dockerImagePlaceholder: 'e.g., nginx:latest',
        ports: 'Port Mappings',
        portsPlaceholder: 'e.g., 8080:80, 443:443',
        portsHelp: 'Format: host_port:container_port, separated by commas',
        volumes: 'Volume Mounts',
        volumesPlaceholder: 'e.g., /host/path:/container/path',
        environment: 'Environment Variables',
        envPlaceholder: 'KEY=value, one per line',

        // STANDALONE service
        standaloneConfig: 'Standalone Configuration',
        command: 'Command',
        commandPlaceholder: 'e.g., /usr/bin/python3',
        arguments: 'Arguments',
        argsPlaceholder: 'e.g., script.py --port 8080',
        workingDirectory: 'Working Directory',
        workdirPlaceholder: 'e.g., /opt/app'
      }
    },
    peers: {
      title: 'Peers',
      peerId: 'Peer ID',
      isRelay: 'Relay',
      isStore: 'Store',
      lastSeen: 'Last Seen',
      source: 'Source',
      filterActive: 'Active Peers',
      filterBlacklisted: 'Blacklisted Peers',
      servicesFiles: 'File Services',
      servicesApps: 'App Services',
      viewServices: 'View Services',
      noPeers: 'No peers found'
    },
    configuration: {
      title: 'Configuration',
      services: 'Services',
      blacklist: 'Blacklist',
      settings: 'Settings',
      blacklistPeer: 'Blacklist Peer',
      addToBlacklist: 'Add to Blacklist',
      removeFromBlacklist: 'Remove from Blacklist',
      blacklistConfirm: 'Are you sure you want to blacklist this peer?',
      unblacklistConfirm: 'Are you sure you want to remove this peer from the blacklist?',
      blacklistSuccess: 'Peer blacklisted successfully',
      blacklistError: 'Failed to blacklist peer',
      unblacklistSuccess: 'Peer removed from blacklist',
      unblacklistError: 'Failed to remove peer from blacklist'
    },
    navigation: {
      dashboard: 'Dashboard',
      peers: 'Peers',
      workflows: 'Workflows',
      listWorkflows: 'List Workflows',
      createWorkflow: 'Create Workflow',
      configureNode: 'Configure Node',
      blacklist: 'Blacklist',
      services: 'Services',
      restartPeer: 'Restart Peer',
      logout: 'Logout',
      restartSuccess: 'Node restart initiated. Logging out...',
      restartFailed: 'Failed to restart node'
    }
  }
}
